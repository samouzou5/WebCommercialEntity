//------------------------------------------------------------------------------
// <auto-generated>
//    Ce code a été généré à partir d'un modèle.
//
//    Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//    Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebCommercialEntity.Models
{
    using System;
    using System.Data;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CommercialEntities : DbContext
    {
        public CommercialEntities()
            : base("name=CommercialEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<articles> articles { get; set; }
        public DbSet<clientel> clientel { get; set; }
        public DbSet<commandes> commandes { get; set; }
        public DbSet<compose> compose { get; set; }
        public DbSet<detail_cde> detail_cde { get; set; }
        public DbSet<utilisateur> utilisateur { get; set; }
        public DbSet<vendeur> vendeur { get; set; }
        //méthode générée pour appeler la procédure d'augmentation des prix
        public virtual int articles_augm_prix(Nullable<double> augmente)
        {
            var augmenteParameter = augmente.HasValue ?
                new ObjectParameter("augmente", augmente) :
                new ObjectParameter("augmente", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("articles_augm_prix", augmenteParameter);
        }

        //Rafrachit la base de données suite à la mise à jour de la procédure stockée
        public void Refresh()
        {
            var context = ((IObjectContextAdapter)this).ObjectContext;
            var refreshableObjects = (from entry in context.ObjectStateManager.GetObjectStateEntries(
                                                        EntityState.Added
                                                       | EntityState.Deleted
                                                       | EntityState.Modified
                                                       | EntityState.Unchanged)
                                      where entry.EntityKey != null
                                      select entry.Entity).ToList();

            context.Refresh(RefreshMode.StoreWins, refreshableObjects);
        }

    }
}
